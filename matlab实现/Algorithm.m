%基于局部的亚像素边缘提取
%完全理想的情况，阶跃边缘
%低噪声下高斯滤波

%% 构造理想直线边缘图
N = 40;
slope = -0.5;
intercept = 20;
I_source = ideal_line(N,slope,intercept);
figure(1)
subplot(2,2,1);
imshow(I_source./255);
%添加噪声
J = imnoise(I_source./255,'gaussian',0,0.0001);
subplot(2,2,2);
imshow(J);
%滤波模板
mask = fspecial('gaussian',3);      %3*3高斯滤波模板
J1 = imfilter(J,mask,'same');
subplot(2,2,3);
imshow(J1);
I_source = J1;
[weight,high] = size(I_source);

%% 求梯度图像Fx,Fy
%计算图像梯度，此时需要扩充图像
I_expan = zeros(weight+2,high+2);
for m = 2:1:weight+1
    for n = 2:1:high+1
        I_expan(m,n) = I_source(m-1,n-1);
    end
end
% 设置Sobel算子x方向模板
Hx = [-1,-2,-1;0,0,0;1,2,1];
% 设置Sobel算子y方向模板
Hy = Hx';
%编程序实现x,y方向梯度计算
Fx1 = zeros(weight+2,high+2);
Fy1 = zeros(weight+2,high+2);
W = zeros(3,3);%移动窗口
for i = 1:weight
    for j = 1:high
        %模板移动窗口
        W = [I_expan(i,j),I_expan(i,j+1),I_expan(i,j+2);I_expan(i+1,j),I_expan(i+1,j+1),I_expan(i+1,j+2);I_expan(i+2,j),I_expan(i+2,j+1),I_expan(i+2,j+2)];
        Sx = Hx .* W;
        Sy = Hy .* W;
        Fx1(i+1,j+1) = sum(sum(Sx));
        Fy1(i+1,j+1) = sum(sum(Sy));
    end
end
% Fx1 = abs(Fx1);
% Fy1 = abs(Fy1);
% 将一圈扩展1个像素的图像复原
Fx = zeros(weight,high);
Fy = zeros(weight,high);
for i = 1:weight
    for j = 1:high
        Fx(i,j) = Fx1(i+1,j+1);
        Fy(i,j) = Fy1(i+1,j+1);
    end
end

%% 计算边缘点的位置
point = [];
I_edge = abs(Fx) + abs(Fy);
for k = 2:(weight-1)
    for j = 2:(high-1)
        if (I_edge(k,j)>1)
            point = [point;k,j];
        end
    end
end
[number,l] = size(point);

%得出可能边缘点的梯度方向
point_angle = [];
for a = 1:1:number
    angle = atan(Fy(point(a,1),point(a,2))/Fx(point(a,1),point(a,2)))*180/pi;
    point_angle = [point_angle;point(a,1),point(a,2),angle];
end

%% 根据atan(Fy/Fx)得出边缘点大致方向
point_state = [];
a = [];
b = [];
for h = 2:1:(number-2)
   if (point_angle(h,3)>=0 && point_angle(h,3)<=45 && point_angle(h,1)>2 && point_angle(h,2)>2)          %在模型坐标系下直线斜率在[0,1)
       A = (I_source(point_angle(h,1),point_angle(h,2)+2) + ...
            I_source(point_angle(h,1)+1,point_angle(h,2)+2)+...
            I_source(point_angle(h,1)+1,point_angle(h,2)+1))/3;
       B = (I_source(point_angle(h,1)-1,point_angle(h,2)-1)+ ...
            I_source(point_angle(h,1)-1,point_angle(h,2)-2)+...
            I_source(point_angle(h,1),point_angle(h,2)-2))/3;
       SL = (I_source(point_angle(h,1)-2,point_angle(h,2)-1) + ...
            I_source(point_angle(h,1)-1,point_angle(h,2)-1)+...
            I_source(point_angle(h,1),point_angle(h,2)-1)+...
            I_source(point_angle(h,1)+1,point_angle(h,2)-1)+...
            I_source(point_angle(h,1)+2,point_angle(h,2)-1));
       SM = (I_source(point_angle(h,1)-2,point_angle(h,2)) + ...
            I_source(point_angle(h,1)-1,point_angle(h,2))+...
            I_source(point_angle(h,1),point_angle(h,2))+...
            I_source(point_angle(h,1)+1,point_angle(h,2))+...
            I_source(point_angle(h,1)+2,point_angle(h,2)));
       SR = (I_source(point_angle(h,1)-2,point_angle(h,2)+1)+ ...
            I_source(point_angle(h,1)-1,point_angle(h,2)+1)+...
            I_source(point_angle(h,1),point_angle(h,2)+1)+...
            I_source(point_angle(h,1)+1,point_angle(h,2)+1)+...
            I_source(point_angle(h,1)+2,point_angle(h,2))+1);
        a = [a;point_angle(h,1),point_angle(h,2),(2*SM - 5*(A+B))/2/(A-B)];
        b = [b;point_angle(h,1),point_angle(h,2),(SR - SL)/2/(A-B)];
   elseif (point_angle(h,3)>=45 && point_angle(h,3)<=90 && point_angle(h,1)>2 && point_angle(h,2)>2)     %直线斜率在[1,+)
       A = (I_source(point_angle(h,1)+2,point_angle(h,2)) + ...
            I_source(point_angle(h,1)+2,point_angle(h,2)+1)+...
            I_source(point_angle(h,1)+1,point_angle(h,2)+1))/3;
       B = (I_source(point_angle(h,1)-1,point_angle(h,2)-1)+ ...
            I_source(point_angle(h,1)-2,point_angle(h,2)-1)+...
            I_source(point_angle(h,1)-2,point_angle(h,2)))/3;
       SL =(I_source(point_angle(h,1)-1,point_angle(h,2)-2)+ ...
            I_source(point_angle(h,1)-1,point_angle(h,2)-1)+...
            I_source(point_angle(h,1)-1,point_angle(h,2))+...
            I_source(point_angle(h,1)-1,point_angle(h,2)+1)+...
            I_source(point_angle(h,1)-1,point_angle(h,2))+2);
       SM =(I_source(point_angle(h,1),point_angle(h,2)-2)+ ...
            I_source(point_angle(h,1),point_angle(h,2)-1)+...
            I_source(point_angle(h,1),point_angle(h,2))+...
            I_source(point_angle(h,1),point_angle(h,2)+1)+...
            I_source(point_angle(h,1),point_angle(h,2))+2);
       SR =(I_source(point_angle(h,1)+1,point_angle(h,2)-2)+ ...
            I_source(point_angle(h,1)+1,point_angle(h,2)-1)+...
            I_source(point_angle(h,1)+1,point_angle(h,2))+...
            I_source(point_angle(h,1)+1,point_angle(h,2)+1)+...
            I_source(point_angle(h,1)+1,point_angle(h,2))+2);
        a = [a;point_angle(h,1),point_angle(h,2),(2*SM - 5*(A+B))/2/(A-B)];
        b = [b;point_angle(h,1),point_angle(h,2),(SR - SL)/2/(A-B)];
   elseif (point_angle(h,3)<0 && point_angle(h,3)>=(-45) && point_angle(h,1)>2 && point_angle(h,2)>2)    %直线斜率在[-1，0)
       A = (I_source(point_angle(h,1),point_angle(h,2)+2) + ...
            I_source(point_angle(h,1)-1,point_angle(h,2)+2)+...
            I_source(point_angle(h,1)-1,point_angle(h,2)+1))/3;
       B = (I_source(point_angle(h,1)+1,point_angle(h,2)-1)+ ...
            I_source(point_angle(h,1)+1,point_angle(h,2)-2)+...
            I_source(point_angle(h,1),point_angle(h,2)-2))/3;
       SL = (I_source(point_angle(h,1)-2,point_angle(h,2)-1) + ...
            I_source(point_angle(h,1)-1,point_angle(h,2)-1)+...
            I_source(point_angle(h,1),point_angle(h,2)-1)+...
            I_source(point_angle(h,1)+1,point_angle(h,2)-1)+...
            I_source(point_angle(h,1)+2,point_angle(h,2)-1));
       SM = (I_source(point_angle(h,1)-2,point_angle(h,2)) + ...
            I_source(point_angle(h,1)-1,point_angle(h,2))+...
            I_source(point_angle(h,1),point_angle(h,2))+...
            I_source(point_angle(h,1)+1,point_angle(h,2))+...
            I_source(point_angle(h,1)+2,point_angle(h,2)));
       SR = (I_source(point_angle(h,1)-2,point_angle(h,2)+1)+ ...
            I_source(point_angle(h,1)-1,point_angle(h,2)+1)+...
            I_source(point_angle(h,1),point_angle(h,2)+1)+...
            I_source(point_angle(h,1)+1,point_angle(h,2)+1)+...
            I_source(point_angle(h,1)+2,point_angle(h,2))+1);
        a = [a;point_angle(h,1),point_angle(h,2),(2*SM - 5*(A+B))/2/(A-B)];
        b = [b;point_angle(h,1),point_angle(h,2),(SR - SL)/2/(A-B)];
   elseif   (point_angle(h,3)<(-45) && point_angle(h,1)>2 && point_angle(h,2)>2)                     %直线斜率在(-,-1)
       A = (I_source(point_angle(h,1)+2,point_angle(h,2)) + ...
            I_source(point_angle(h,1)+2,point_angle(h,2)-1)+...
            I_source(point_angle(h,1)+1,point_angle(h,2)-1))/3;
       B = (I_source(point_angle(h,1)-1,point_angle(h,2)+1)+ ...
            I_source(point_angle(h,1)-2,point_angle(h,2)+1)+...
            I_source(point_angle(h,1)-2,point_angle(h,2)))/3;
       SL =(I_source(point_angle(h,1)-1,point_angle(h,2)-2)+ ...
            I_source(point_angle(h,1)-1,point_angle(h,2)-1)+...
            I_source(point_angle(h,1)-1,point_angle(h,2))+...
            I_source(point_angle(h,1)-1,point_angle(h,2)+1)+...
            I_source(point_angle(h,1)-1,point_angle(h,2))+2);
       SM =(I_source(point_angle(h,1),point_angle(h,2)-2)+ ...
            I_source(point_angle(h,1),point_angle(h,2)-1)+...
            I_source(point_angle(h,1),point_angle(h,2))+...
            I_source(point_angle(h,1),point_angle(h,2)+1)+...
            I_source(point_angle(h,1),point_angle(h,2))+2);
       SR =(I_source(point_angle(h,1)+1,point_angle(h,2)-2)+ ...
            I_source(point_angle(h,1)+1,point_angle(h,2)-1)+...
            I_source(point_angle(h,1)+1,point_angle(h,2))+...
            I_source(point_angle(h,1)+1,point_angle(h,2)+1)+...
            I_source(point_angle(h,1)+1,point_angle(h,2))+2);
        a = [a;point_angle(h,1),point_angle(h,2),(2*SM - 5*(A+B))/2/(A-B)];
        b = [b;point_angle(h,1),point_angle(h,2),(SR - SL)/2/(A-B)];   
   end
end
